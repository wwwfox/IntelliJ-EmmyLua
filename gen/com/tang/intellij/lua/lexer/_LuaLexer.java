/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.lang.LuaLanguageLevel;

import java.io.Reader;

import static com.tang.intellij.lua.psi.LuaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lua.flex</tt>
 */
public class _LuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xBLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\6\200\200\300");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\137\2\100\5");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\36\1\3\1\2\1\0\1\3\1\1\22\36\1\3\1\57\1\34\1\56\1\36\1\64\1\74\1\40\1"+
    "\66\1\67\1\63\1\10\1\70\1\17\1\16\1\65\1\12\11\5\1\72\1\71\1\61\1\32\1\60"+
    "\2\36\4\6\1\7\1\6\5\37\1\15\3\37\1\11\4\37\1\14\2\37\1\13\2\37\1\31\1\35\1"+
    "\33\1\73\1\37\1\36\1\46\1\47\1\41\1\27\1\21\1\52\1\22\1\54\1\23\1\37\1\50"+
    "\1\51\1\37\1\25\1\24\1\43\1\37\1\20\1\45\1\44\1\53\1\37\1\55\1\42\2\37\1\26"+
    "\1\75\1\30\1\62\6\36\1\0\32\36\1\0\136\36\201\37\1\4\177\37\13\4\35\37\2\4"+
    "\5\37\1\4\57\37\1\4\40\37\200\36");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\10\6\4\1\11\1\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\10\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\2\1\0\2\40"+
    "\1\5\2\0\1\5\1\0\1\5\1\41\1\42\4\4"+
    "\1\43\1\44\1\45\2\4\1\46\1\47\1\0\1\50"+
    "\13\4\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\37\4\0\1\61\2\0\3\5\1\62\4\0"+
    "\2\4\1\63\2\4\1\64\1\65\1\0\2\4\1\66"+
    "\2\4\1\67\4\4\1\0\1\61\1\70\1\0\1\5"+
    "\6\0\2\4\1\71\1\72\1\0\1\73\1\74\6\4"+
    "\1\75\2\0\1\76\1\5\2\0\1\77\1\100\3\4"+
    "\1\0\1\101\1\102\1\103\1\4\1\104\1\105\1\0"+
    "\1\5\2\0\1\106\1\107\1\110\1\0\1\4\4\0"+
    "\1\4\2\0\1\111\4\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u01b2\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u01b2\0\u04d8\0\u01b2"+
    "\0\u0516\0\u0554\0\u01b2\0\u01b2\0\u01b2\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u01b2\0\u01b2\0\u087a\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u08b8\0\u01b2\0\u01b2\0\u01b2\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u01b2\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u022e\0\u022e"+
    "\0\u022e\0\u0d14\0\u0d52\0\u022e\0\u01b2\0\u0516\0\u01b2\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u103a\0\u1078\0\u10b6\0\u0972\0\u10f4"+
    "\0\u1132\0\u0b62\0\u01b2\0\u1170\0\u11ae\0\u01b2\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u022e\0\u1360\0\u139e\0\u022e"+
    "\0\u022e\0\u13dc\0\u141a\0\u1458\0\u022e\0\u1496\0\u14d4\0\u022e"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u022e\0\u196e\0\u022e\0\u022e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u160a\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u022e\0\u022e\0\u022e\0\u1e08\0\u022e\0\u022e\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u022e\0\u022e\0\u022e\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u022e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u01b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\2\12\1\14\1\12\1\15"+
    "\3\12\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\10\1\12\1\35\1\36\2\12\1\37\1\12\1\40"+
    "\1\41\1\12\1\42\1\43\1\44\1\12\1\45\1\46"+
    "\1\10\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\2"+
    "\2\0\73\2\34\0\1\65\101\0\1\66\35\0\31\10"+
    "\1\67\44\10\17\0\1\70\56\0\17\71\1\72\56\71"+
    "\77\0\3\11\76\0\4\12\1\0\5\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\25\0\1\13"+
    "\1\0\1\73\2\0\1\13\1\0\1\74\1\75\1\76"+
    "\2\0\1\73\61\0\1\13\1\0\1\73\2\0\1\13"+
    "\1\77\1\74\1\75\1\76\2\0\1\73\20\0\1\77"+
    "\40\0\1\100\4\0\1\100\3\0\1\101\76\0\1\102"+
    "\62\0\4\12\1\0\5\12\2\0\1\12\1\103\4\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\24\0\4\12"+
    "\1\0\5\12\2\0\5\12\1\104\1\0\1\12\7\0"+
    "\1\12\1\0\10\12\1\105\4\12\24\0\4\12\1\0"+
    "\5\12\2\0\4\12\1\106\1\12\1\0\1\12\7\0"+
    "\1\12\1\0\15\12\24\0\4\12\1\0\5\12\2\0"+
    "\5\12\1\107\1\0\1\12\7\0\1\12\1\0\11\12"+
    "\1\110\3\12\24\0\4\12\1\0\5\12\2\0\1\111"+
    "\5\12\1\0\1\12\7\0\1\12\1\0\15\12\24\0"+
    "\4\12\1\0\5\12\2\0\3\12\1\112\1\113\1\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\24\0\4\12"+
    "\1\0\5\12\2\0\4\12\1\114\1\12\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\51\0\1\115\1\116\75\0"+
    "\1\117\47\0\4\12\1\0\5\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\1\120\14\12\24\0\4\12"+
    "\1\0\5\12\2\0\1\121\5\12\1\0\1\12\7\0"+
    "\1\12\1\0\13\12\1\122\1\12\24\0\4\12\1\0"+
    "\5\12\2\0\5\12\1\123\1\0\1\12\7\0\1\12"+
    "\1\0\15\12\24\0\4\12\1\0\5\12\2\0\1\124"+
    "\5\12\1\0\1\12\7\0\1\12\1\0\15\12\24\0"+
    "\4\12\1\0\5\12\2\0\4\12\1\125\1\12\1\0"+
    "\1\12\7\0\1\12\1\0\15\12\24\0\4\12\1\0"+
    "\5\12\2\0\4\12\1\126\1\12\1\0\1\12\7\0"+
    "\1\12\1\0\5\12\1\127\4\12\1\130\2\12\24\0"+
    "\4\12\1\0\5\12\2\0\5\12\1\131\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\24\0\4\12\1\0\5\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\13\12"+
    "\1\132\1\12\77\0\1\133\50\0\1\134\25\0\1\135"+
    "\47\0\1\136\26\0\1\137\46\0\1\140\130\0\1\141"+
    "\102\0\1\142\3\0\34\65\1\143\1\144\40\65\35\66"+
    "\1\145\2\66\1\143\35\66\31\0\1\146\1\147\62\0"+
    "\1\150\75\0\1\151\63\0\1\100\2\0\1\152\1\0"+
    "\1\100\4\0\1\152\73\0\1\75\75\0\1\153\65\0"+
    "\1\154\4\0\1\154\70\0\3\155\2\0\1\155\6\0"+
    "\1\155\5\0\1\155\11\0\1\155\4\0\2\155\2\0"+
    "\1\155\30\0\1\100\4\0\1\100\101\0\1\156\77\0"+
    "\1\157\1\160\4\0\1\161\1\0\1\162\51\0\4\12"+
    "\1\0\5\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\2\12\1\163\1\164\11\12\24\0\4\12\1\0"+
    "\5\12\2\0\6\12\1\0\1\165\7\0\1\12\1\0"+
    "\15\12\24\0\4\12\1\0\5\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\4\12\1\166\10\12\24\0"+
    "\4\12\1\0\5\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\3\12\1\167\11\12\24\0\4\12\1\0"+
    "\5\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\10\12\1\170\4\12\24\0\4\12\1\0\5\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\3\12\1\171"+
    "\11\12\24\0\4\12\1\0\5\12\1\172\1\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\24\0\4\12"+
    "\1\0\5\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\12\12\1\173\2\12\24\0\4\12\1\0\5\12"+
    "\2\0\1\12\1\174\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\15\12\24\0\4\12\1\0\5\12\2\0\6\12"+
    "\1\0\1\175\7\0\1\12\1\0\15\12\24\0\4\12"+
    "\1\0\5\12\2\0\1\12\1\176\4\12\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\24\0\4\12\1\0\5\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\1\177"+
    "\14\12\24\0\4\12\1\0\5\12\2\0\1\200\5\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\24\0\4\12"+
    "\1\0\5\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\10\12\1\201\4\12\24\0\4\12\1\0\5\12"+
    "\2\0\5\12\1\202\1\0\1\12\7\0\1\12\1\0"+
    "\15\12\24\0\4\12\1\0\5\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\3\12\1\203\11\12\24\0"+
    "\4\12\1\0\5\12\2\0\3\12\1\204\2\12\1\0"+
    "\1\12\7\0\1\12\1\0\15\12\21\0\2\65\2\0"+
    "\71\65\1\0\2\66\2\0\71\66\33\146\1\205\42\146"+
    "\1\206\2\0\14\206\1\207\56\206\31\0\1\210\51\0"+
    "\1\154\1\0\1\73\2\0\1\154\6\0\1\73\61\0"+
    "\2\155\1\211\1\0\1\212\1\155\1\0\1\74\1\75"+
    "\1\213\2\0\1\211\5\0\1\155\11\0\1\155\1\0"+
    "\1\212\2\0\2\155\2\0\1\155\44\0\1\214\101\0"+
    "\1\215\76\0\1\216\77\0\1\217\51\0\4\12\1\0"+
    "\5\12\2\0\1\12\1\220\4\12\1\0\1\12\7\0"+
    "\1\12\1\0\15\12\24\0\4\12\1\0\5\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\12\12\1\221"+
    "\2\12\24\0\4\12\1\0\5\12\2\0\1\12\1\222"+
    "\4\12\1\0\1\12\7\0\1\12\1\0\15\12\24\0"+
    "\4\12\1\0\5\12\2\0\4\12\1\223\1\12\1\0"+
    "\1\12\7\0\1\12\1\0\15\12\41\0\1\224\60\0"+
    "\4\12\1\0\5\12\2\0\1\12\1\225\4\12\1\0"+
    "\1\12\7\0\1\12\1\0\15\12\24\0\4\12\1\0"+
    "\5\12\2\0\5\12\1\226\1\0\1\12\7\0\1\12"+
    "\1\0\15\12\24\0\4\12\1\0\5\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\5\12\1\227\7\12"+
    "\24\0\4\12\1\0\5\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\5\12\1\230\7\12\24\0\4\12"+
    "\1\0\5\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\4\12\1\231\10\12\24\0\4\12\1\0\5\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\1\232"+
    "\14\12\24\0\4\12\1\0\5\12\2\0\3\12\1\233"+
    "\2\12\1\0\1\12\7\0\1\12\1\0\15\12\24\0"+
    "\4\12\1\0\5\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\10\12\1\234\4\12\20\0\32\146\1\205"+
    "\1\235\42\146\1\206\2\0\73\206\1\207\1\236\1\237"+
    "\73\207\31\0\1\240\1\210\50\0\2\155\1\211\1\152"+
    "\1\212\1\155\1\0\1\74\1\75\1\213\1\152\1\0"+
    "\1\211\5\0\1\155\11\0\1\155\1\0\1\212\2\0"+
    "\2\155\2\0\1\155\33\0\1\152\6\0\1\152\63\0"+
    "\3\241\2\0\1\241\6\0\1\241\5\0\1\241\11\0"+
    "\1\241\4\0\2\241\2\0\1\241\45\0\1\242\102\0"+
    "\1\243\74\0\1\244\77\0\1\245\51\0\4\12\1\0"+
    "\5\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\5\12\1\246\7\12\24\0\4\12\1\0\5\12\2\0"+
    "\1\247\5\12\1\0\1\12\7\0\1\12\1\0\15\12"+
    "\24\0\4\12\1\0\5\12\2\0\3\12\1\250\2\12"+
    "\1\0\1\12\7\0\1\12\1\0\15\12\62\0\1\251"+
    "\37\0\4\12\1\0\5\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\7\12\1\252\5\12\24\0\4\12"+
    "\1\0\5\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\10\12\1\253\4\12\24\0\4\12\1\0\5\12"+
    "\2\0\1\12\1\254\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\15\12\24\0\4\12\1\0\5\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\3\12\1\255\11\12"+
    "\24\0\4\12\1\0\5\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\10\12\1\256\4\12\24\0\4\12"+
    "\1\0\5\12\2\0\1\12\1\257\4\12\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\22\0\1\237\76\0\1\237"+
    "\13\0\1\260\56\0\76\240\5\0\2\241\1\261\1\0"+
    "\1\212\1\241\6\0\1\261\5\0\1\241\11\0\1\241"+
    "\1\0\1\212\2\0\2\241\2\0\1\241\46\0\1\262"+
    "\72\0\1\263\55\0\1\244\2\0\73\244\1\245\2\0"+
    "\73\245\4\0\4\12\1\0\5\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\3\12\1\264\11\12\24\0"+
    "\4\12\1\0\5\12\2\0\5\12\1\265\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\24\0\4\12\1\0\5\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\11\12"+
    "\1\266\3\12\63\0\1\267\36\0\4\12\1\0\5\12"+
    "\2\0\3\12\1\270\2\12\1\0\1\12\7\0\1\12"+
    "\1\0\15\12\37\0\1\271\63\0\2\241\1\261\1\152"+
    "\1\212\1\241\4\0\1\152\1\0\1\261\5\0\1\241"+
    "\11\0\1\241\1\0\1\212\2\0\2\241\2\0\1\241"+
    "\47\0\1\272\72\0\1\273\100\0\1\274\55\0\4\12"+
    "\1\0\5\12\2\0\4\12\1\275\1\12\1\0\1\12"+
    "\7\0\1\12\1\0\15\12\37\0\1\207\103\0\1\244"+
    "\72\0\1\276\73\0\1\277\61\0\4\12\1\0\5\12"+
    "\2\0\5\12\1\300\1\0\1\12\7\0\1\12\1\0"+
    "\15\12\43\0\1\301\116\0\1\302\55\0\1\303\116\0"+
    "\1\304\55\0\1\245\66\0\1\305\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8804];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\3\1\1\11\11\1\1\11"+
    "\1\1\1\11\2\1\3\11\14\1\2\11\1\1\4\11"+
    "\1\1\3\11\3\1\1\0\1\11\2\1\2\0\1\1"+
    "\1\0\15\1\1\11\1\0\1\11\13\1\11\11\4\0"+
    "\1\1\2\0\1\11\2\1\1\11\4\0\7\1\1\0"+
    "\12\1\1\0\2\1\1\0\1\1\6\0\4\1\1\0"+
    "\11\1\2\0\2\1\2\0\5\1\1\0\6\1\1\0"+
    "\1\1\2\0\3\1\1\0\1\1\4\0\1\1\2\0"+
    "\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LuaLanguageLevel level;
    public _LuaLexer(LuaLanguageLevel level) {
        this((Reader) null);
        this.level = level;
    }

    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockRedundant() {
        int redundant = -1;
        String cs = yytext().toString();
        StringBuilder s = new StringBuilder("]");
        for (int i = 0; i < nBrackets; i++) s.append('=');
        s.append(']');
        int index = cs.indexOf(s.toString());
        if (index > 0)
            redundant = yylength() - index - nBrackets - 2;
        return redundant;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            } 
            // fall through
          case 75: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 76: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 78: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return PLUS;
            } 
            // fall through
          case 80: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 82: break;
          case 9: 
            { return LCURLY;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return RCURLY;
            } 
            // fall through
          case 84: break;
          case 11: 
            { return LBRACK;
            } 
            // fall through
          case 85: break;
          case 12: 
            { return ASSIGN;
            } 
            // fall through
          case 86: break;
          case 13: 
            { return RBRACK;
            } 
            // fall through
          case 87: break;
          case 14: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 88: break;
          case 15: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 89: break;
          case 16: 
            { return GETN;
            } 
            // fall through
          case 90: break;
          case 17: 
            { return GT;
            } 
            // fall through
          case 91: break;
          case 18: 
            { return LT;
            } 
            // fall through
          case 92: break;
          case 19: 
            { return BIT_TILDE;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return MULT;
            } 
            // fall through
          case 94: break;
          case 21: 
            { return MOD;
            } 
            // fall through
          case 95: break;
          case 22: 
            { return DIV;
            } 
            // fall through
          case 96: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 97: break;
          case 24: 
            { return RPAREN;
            } 
            // fall through
          case 98: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 99: break;
          case 26: 
            { return SEMI;
            } 
            // fall through
          case 100: break;
          case 27: 
            { return COLON;
            } 
            // fall through
          case 101: break;
          case 28: 
            { return EXP;
            } 
            // fall through
          case 102: break;
          case 29: 
            { return BIT_AND;
            } 
            // fall through
          case 103: break;
          case 30: 
            { return BIT_OR;
            } 
            // fall through
          case 104: break;
          case 31: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 105: break;
          case 32: 
            { yypushback(yylength()); yybegin(xCOMMENT);
            } 
            // fall through
          case 106: break;
          case 33: 
            { return CONCAT;
            } 
            // fall through
          case 107: break;
          case 34: 
            { boolean block = checkBlock();
        if (block) { yypushback(yylength()); yybegin(xBLOCK_COMMENT); }
        else { yypushback(yylength()); yybegin(xCOMMENT); }
            } 
            // fall through
          case 108: break;
          case 35: 
            { return IN;
            } 
            // fall through
          case 109: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 110: break;
          case 37: 
            { return OR;
            } 
            // fall through
          case 111: break;
          case 38: 
            { return DO;
            } 
            // fall through
          case 112: break;
          case 39: 
            { yybegin(xBLOCK_STRING); yypushback(yylength()); checkBlock();
            } 
            // fall through
          case 113: break;
          case 40: 
            { return EQ;
            } 
            // fall through
          case 114: break;
          case 41: 
            { yybegin(xSHEBANG); return SHEBANG;
            } 
            // fall through
          case 115: break;
          case 42: 
            { return GE;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return BIT_RTRT;
            } 
            // fall through
          case 117: break;
          case 44: 
            { return LE;
            } 
            // fall through
          case 118: break;
          case 45: 
            { return BIT_LTLT;
            } 
            // fall through
          case 119: break;
          case 46: 
            { return NE;
            } 
            // fall through
          case 120: break;
          case 47: 
            { return DOUBLE_DIV;
            } 
            // fall through
          case 121: break;
          case 48: 
            { return DOUBLE_COLON;
            } 
            // fall through
          case 122: break;
          case 49: 
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            } 
            // fall through
          case 123: break;
          case 50: 
            { return ELLIPSIS;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return END;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return NIL;
            } 
            // fall through
          case 126: break;
          case 53: 
            { return NOT;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return AND;
            } 
            // fall through
          case 128: break;
          case 55: 
            { return FOR;
            } 
            // fall through
          case 129: break;
          case 56: 
            { yybegin(YYINITIAL);return DOC_COMMENT;
            } 
            // fall through
          case 130: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 131: break;
          case 58: 
            { if (level.getVersion() < LuaLanguageLevel.LUA52.getVersion()) return ID; else return GOTO;
            } 
            // fall through
          case 132: break;
          case 59: 
            { return TRUE;
            } 
            // fall through
          case 133: break;
          case 60: 
            { return THEN;
            } 
            // fall through
          case 134: break;
          case 61: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL); return STRING;
        } else {
            yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
        }
            } 
            // fall through
          case 135: break;
          case 62: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL);return BLOCK_COMMENT; }
        else { yybegin(YYINITIAL);return BLOCK_COMMENT; }
            } 
            // fall through
          case 136: break;
          case 63: 
            { return REGION;
            } 
            // fall through
          case 137: break;
          case 64: 
            { return ENDREGION;
            } 
            // fall through
          case 138: break;
          case 65: 
            { return BREAK;
            } 
            // fall through
          case 139: break;
          case 66: 
            { return LOCAL;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return FALSE;
            } 
            // fall through
          case 141: break;
          case 68: 
            { return UNTIL;
            } 
            // fall through
          case 142: break;
          case 69: 
            { return WHILE;
            } 
            // fall through
          case 143: break;
          case 70: 
            { return REPEAT;
            } 
            // fall through
          case 144: break;
          case 71: 
            { return RETURN;
            } 
            // fall through
          case 145: break;
          case 72: 
            { return ELSEIF;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return FUNCTION;
            } 
            // fall through
          case 147: break;
          case 74: 
            { return DUMMY_GLOBAL;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
